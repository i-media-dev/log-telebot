import logging
import os
from datetime import datetime as dt

from dotenv import load_dotenv

from logger.constants import PROJECTS
from logger.logging_config import setup_logging

load_dotenv()
setup_logging()


class LogMonitor:
    """–ö–ª–∞—Å—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —á—Ç–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ª–æ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞."""

    def __init__(self, projects: dict[str, dict[str, str]] = PROJECTS):
        self.projects = projects

    def check_logs(self, project_name: str) -> tuple[str, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞."""
        today = dt.now().strftime('%Y-%m-%d')
        project = self.projects[project_name]
        log_path = project['log_path']
        if not os.path.exists(log_path):
            message = f'‚ùå –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_path}'
            return 'NOTFOUND', message
        try:
            for filename in os.listdir(log_path):
                if today in filename:
                    file_path = os.path.join(log_path, filename)
                    with open(file_path, 'r', encoding='utf-8') as f:
                        log_content = f.read()
                        time_match = 'EXECUTION_TIME=' in log_content \
                            and log_content.split(
                                'EXECUTION_TIME='
                            )[1].split(' —Å–µ–∫')[0]
                        exec_time = time_match if time_match else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                        date_match = 'DATE=' in log_content \
                            and log_content.split('DATE=')[1].split(',')[0]
                        date = date_match if date_match else today

                        if 'ENDLOGGING=1' not in log_content:
                            message = '–§–∞–π–ª –µ—â–µ –ø–∏—à–µ—Ç—Å—è'
                            return 'PENDING', message

                        if 'SCRIPT_FINISHED_STATUS=SUCCESS' in log_content:
                            message = (
                                f'‚úÖ –°–∫—Ä–∏–ø—Ç {project_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ\n'
                                f'üìÖ –î–∞—Ç–∞: {date}\n'
                                f'‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {exec_time} —Å–µ–∫. '
                                f'–∏–ª–∏ {round(float(exec_time) / 60, 2)} –º–∏–Ω.'
                            )
                            return 'SUCCESS', message

                        elif 'SCRIPT_FINISHED_STATUS=ERROR' in log_content:
                            error_type_match = 'ERROR_TYPE=' in log_content \
                                and log_content.split(
                                    'ERROR_TYPE='
                                )[1].split(',')[0]
                            error_type = error_type_match \
                                if error_type_match else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                            error_message_match = 'ERROR_MESSAGE=' \
                                in log_content and log_content.split(
                                    'ERROR_MESSAGE='
                                )[1].split(',')[0]
                            error_message = error_message_match \
                                if error_message_match else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                            func_name_match = 'FUNCTION_NAME=' in log_content \
                                and log_content.split(
                                    'FUNCTION_NAME='
                                )[1].split(',')[0]
                            func_name = func_name_match \
                                if func_name_match else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                            message = (
                                f'‚ùå –°–∫—Ä–∏–ø—Ç {project_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è '
                                '—Å –æ—à–∏–±–∫–æ–π\n'
                                f'üìÖ –î–∞—Ç–∞: {date}\n'
                                f'‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {exec_time} —Å–µ–∫. '
                                f'–∏–ª–∏ {round(float(exec_time) / 60, 2)} –º–∏–Ω.\n'
                                f'üíÄ –¢–∏–ø –æ—à–∏–±–∫–∏: {error_type}\n'
                                f'üö¨ {error_message}\n'
                                f'–§—É–Ω–∫—Ü–∏—è, –±—Ä–æ—Å–∏–≤—à–∞—è –æ—à–∏–±–∫—É: {func_name}'
                            )
                            return 'ERROR', message
                        else:
                            message = '–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
                            return 'WARNING', message
            message = f'–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ª–æ–≥ –¥–ª—è {project_name} –Ω–µ –Ω–∞–π–¥–µ–Ω'
            return 'ERROR', message
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}')
            message = f'‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {str(e)}.'
            return 'ERROR', message
